#4 Classes

// Class는 function과 다르게 꼭 type을 적어줘야 한다.

*Cascade Notation
// 예시 1과 2가 같음(nico.을 ..으로 단축시킬 수 있음)
예시1)
var nico = Player(name: 'nico', xp: 1200, team: 'red');
nico.name = 'las';
nico.xp = 1200000;
nico.team = 'blue';

예시2)
var nico = Player(name: 'nico', xp: 1200, team: 'red')
..name = 'las'
..xp = 1200000
..team = 'blue';

*Enums
// 오타율을 낮추기 위한 방법. 선택의 폭을 줄여줌
// String이라고 "red" 이렇게 쓰지 않아도 됨.
enum Team { red, blue }

class Player{
    Team team;
}

viod main() {
    var nico = Player(team: team.red)
}

*Abstract Classes
// 수많은 청사진에 메소드의 이름과 반환 타입만 정해서 정의할 수 있다
Abstract class Human {
    void walk();
}

class Player extends Human {}

void walk() {
    print('I am walking');
}

*Inheritance
// super라는 키워드를 통해 확장을 한 부모 클래스와 상호작용할 수 있게 해줌
class Human {
  final String name;
  Human(this.name);
// Human({required this.name});
  void sayHello() {
    print("Hi my name is $name");
  }
}

enum Team { red, blue }

class Player extends Human {
  final Team team;

  Player({required this.team, required String name}) : super(name);
// }) : super(name: name);
}

void main() {
  var player = Player(
    team: Team.red,
    name: 'min',
  );
  player.sayHello();
}

*override
// 상속 받은거 중에서 추가하 싶은것이 있다면 이걸쓰면 됨.
class Player extends Human {
  final Team team;

  Player({
    required this.team, 
    required String name,
  }) : super(name);
// }) : super(name: name);
  @override
  void sayHello() {
    super.sayHello();
    print('and I play for $team');
  }
}

*Mixins
// Inheritance와 다르게 with를 쓰고 변수를 가져오거나 리턴하지 않는다.
// Mixin은 생성자가 없는 class 이고 상속 받기 보다 훔쳐온다 생각하면 된다.
// 원하는 만큰 다 훔쳐와서 사용할 수 있다.
ex)
class Strong {
  final double strenghtLevel = 1500.99;
}

class QuickRunner {
  void runQuick() {
    print("ruuuuuuuuun!");
  }
}

class Tall {
  final double height = 1.00;
}

class Player with Strong, QuickRunner, Tall {}

class Horse with Strong, QuickRunner {}

class Kid with QuickRunner {}

void main() {
  var player = Player();
  player.runQuick();
}